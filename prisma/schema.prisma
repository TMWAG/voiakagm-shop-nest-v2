// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int     @default(autoincrement()) @id
  name          String  @map("user_name")
  surname       String  @map("user_surename")
  phone         String  @map("user_phone") @unique
  role          Role    @default(USER)
  email         String  @map("user_email") @unique
  password      String  @map("user_password")
  vkLink        String? @map("vk_link")
  tgLink        String? @map("tg_link")
  feedbacks     Feedback[]
  userAddresses UserAddress[]
  orders        Order[]
}

enum Role {
  USER
  SUPERVISOR
  ADMIN
}

model Feedback {
  id        Int     @default(autoincrement()) @id
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  text      String  @map("feedback_text")
  rating    Int     @map("feedback_rating")
}

model Product {
  id              Int       @default(autoincrement()) @id
  name            String    @map("product_name")
  vendor          Vendor    @relation(fields: [vendorId], references: [id])
  vendorId        Int
  category        Category  @relation(fields: [categoryId], references: [id])
  categoryId      Int
  price           Int
  discount        Int?
  description     String
  amount          Int
  sold            Int
  feedbacks       Feedback[]
  pictures        Picture[]
  characteristics Characteristic[]
  orderedProducts OrderedProduct[]
}

model Picture {
  id          Int       @default(autoincrement()) @id
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  filename    String    @map("picture_filename")
}

model Vendor {
  id                Int       @default(autoincrement()) @id
  name              String    @map("vendor_name")
  products          Product[]
  recommendations   Recommendation[]
}

model Category {
  id          Int         @default(autoincrement()) @id
  name        String      @map("category_name")
  products    Product[]
  parameters  Parameter[]
}

model Parameter {
  id              Int       @default(autoincrement()) @id
  name            String    @map("parameter_name")
  category        Category  @relation(fields: [categoryId], references: [id])
  categoryId      Int
  characteristics Characteristic[]
}

model Characteristic {
  id          Int       @default(autoincrement()) @id
  parameter   Parameter @relation(fields: [parameterId], references: [id])
  parameterId Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  value       String    @map("characteristic_value")
}

model UserAddress {
  id          Int       @default(autoincrement()) @id
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  address     String
  orders      Order[]
  @@map("user_addresses")
}

model Recommendation {
  id        Int     @default(autoincrement()) @id
  product   String  @map("product_name")
  filename  String  @map("recommendation_filename")
  rating    Int     @map("recommendation_rating")
  comment   String  @map("recommendation_comment")
  vendor    Vendor  @relation(fields: [vendorId], references: [id])
  vendorId  Int
}

model Order {
  id                Int             @default(autoincrement()) @id
  user              User            @relation(fields: [userId], references: [id])
  userId            Int
  userAddress       UserAddress     @relation(fields: [userAddressId], references: [id])
  userAddressId     Int
  createdAt         DateTime        @default(now())
  status            OrderStatus     @default(NOT_APPROVED) @map("order_status")
  trackNo           String?
  deliveryService   DeliveryService @relation(fields: [deliveryServiceId], references: [id])
  deliveryServiceId Int
  orderedProducts   OrderedProduct[]
}

enum OrderStatus {
  NOT_APPROVED
  APPROVED
  PAID
  COMPLETED
  SENT_FOR_DELIVERY
  DELIVERED
}

model DeliveryService {
  id      Int       @default(autoincrement()) @id
  name    String    @map("delivery_service_name")
  orders  Order[]
}

model OrderedProduct {
  id        Int       @default(autoincrement()) @id
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  amount    Int
}
